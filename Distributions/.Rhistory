q
shiny::runApp()
q
# Functie pentru a crea o fila
create_tab <- function(tab_title, title, img1_src, img2_src, distribution) {
tabPanel(
tab_title,
div(
class = "container",
h1(title),
div(
class = "d-flex justify-content-center",
img(src = img1_src, style = "filter: invert(1);height:4vh;"),
img(src = img2_src, style = "filter: invert(1);height:4vh;")
),
div(
class = "row",
div(
class = "col-4",
tags$h3("Input:"),
# sliderInput(paste0("r", tab_number), "Numarul de succese (r):", min = 1, max = 50, value = 10, step = 1),
# checkboxInput(paste0("fix_r", tab_number), "Fixeaza r", value = TRUE),
# sliderInput(paste0("p", tab_number), "Probabilitatea de succes (p):", min = 0.01, max = 1, value = 0.5, step = 0.01),
# checkboxInput(paste0("fix_p", tab_number), "Fixeaza p", value = FALSE)
switch(
distribution,
# NORMALA_STANDARD = create_norm_std_slider(),
# NORMALA = create_norm_slider(),
# BINOMIALA = create_binom_slider(),
# EXPONENTIALA = create_exp_slider(),
POISSON = create_pois_slider()
)
),
div(
class = "col-8",
h4("Reprezentare Grafica"),
# switch pentru a selecta tipul de distributie
switch(
distribution,
NORMALA_STANDARD = plotOutput("norm_std_server"),
NORMALA = textOutput("norm_server"),
BINOMIALA = textOutput("binom_server"),
EXPONENTIALA = textOutput("exp_server"),
POISSON = textOutput("pois_server")
),
)
)
)
)
}
runApp()
options(shiny.launch.browser = FALSE)  # Dezactivează deschiderea în browser extern
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("shiny")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x <- seq(-4, 4, length.out = 500)
cdf_values <- pnorm(x, mean = 0, sd = 1) # CDF pentru normală standard
# Plotare
plot(
x, cdf_values,
type = "l",
lwd = 2,
col = "blue",
xlab = "X",
ylab = "F(X)",
main = "Funcția de distribuție cumulativă (CDF)\nNormala Standard"
)
# Afișare punct pentru valoarea selectată
points(input$std_normal_x, pnorm(input$std_normal_x), col = "red", pch = 19)
runApp()
runApp()
runApp()
runApp()
runApp()
x <- seq(-4, 4, length.out = 500)
cdf_values <- pnorm(x, mean = 0, sd = 1) # CDF pentru normală standard
# Plotare
plot(
x, cdf_values,
type = "l",
lwd = 2,
col = "blue",
xlab = "X",
ylab = "F(X)",
main = "Funcția de distribuție cumulativă (CDF)\nNormala Standard"
)
# Afișare punct pentru valoarea selectată
points(input$std_normal_x, pnorm(input$std_normal_x), col = "red", pch = 19)
plot(
x, cdf_values,
type = "l",
lwd = 2,
col = "blue",
xlab = "X",
ylab = "F(X)",
main = "Funcția de distribuție cumulativă (CDF)\nNormala Standard"
)
# Afișare punct pentru valoarea selectată
points(input$std_normal_x, pnorm(input$std_normal_x), col = "red", pch = 19)
output$std_normal_cdf_plot <- renderPlot({
x <- seq(-4, 4, length.out = 500)
cdf_values <- pnorm(x, mean = 0, sd = 1) # CDF pentru normală standard
# Plotare
plot(
x, cdf_values,
type = "l",
lwd = 2,
col = "blue",
xlab = "X",
ylab = "F(X)",
main = "Funcția de distribuție cumulativă (CDF)\nNormala Standard"
)
# Afișare punct pentru valoarea selectată
points(input$std_normal_x, pnorm(input$std_normal_x), col = "red", pch = 19)
abline(v = input$std_normal_x, col = "red", lty = 2)
abline(h = pnorm(input$std_normal_x), col = "red", lty = 2)
})
create_std_normal_slider <- function() {
# Slider pentru a selecta valoarea la care se calculeaza CDF
sliderInput(
inputId = "std_normal_x",
label = "Selectează valoarea X:",
min = -4,
max = 4,
value = 0,
step = 0.1
)
}
std_normal_server <- function(input, output, session) {
# Calculul și afișarea CDF
output$std_normal_cdf_plot <- renderPlot({
x <- seq(-4, 4, length.out = 500)
cdf_values <- pnorm(x, mean = 0, sd = 1) # CDF pentru normală standard
# Plotare
plot(
x, cdf_values,
type = "l",
lwd = 2,
col = "blue",
xlab = "X",
ylab = "F(X)",
main = "Funcția de distribuție cumulativă (CDF)\nNormala Standard"
)
# Afișare punct pentru valoarea selectată
points(input$std_normal_x, pnorm(input$std_normal_x), col = "red", pch = 19)
abline(v = input$std_normal_x, col = "red", lty = 2)
abline(h = pnorm(input$std_normal_x), col = "red", lty = 2)
})
}
output$std_normal_cdf_plot <- renderPlot({
x <- seq(-4, 4, length.out = 500)
cdf_values <- pnorm(x, mean = 0, sd = 1) # CDF pentru normală standard
# Plotare
plot(
x, cdf_values,
type = "l",
lwd = 2,
col = "blue",
xlab = "X",
ylab = "F(X)",
main = "Funcția de distribuție cumulativă (CDF)\nNormala Standard"
)
# Afișare punct pentru valoarea selectată
points(input$std_normal_x, pnorm(input$std_normal_x), col = "red", pch = 19)
abline(v = input$std_normal_x, col = "red", lty = 2)
abline
runApp()
q
q
q
q
q
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
